apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: cluster-aws
  labels:
    provider: aws
    cluster: eks
spec:
  compositeTypeRef:
    apiVersion: devopstoolkitseries.com/v1alpha1
    kind: CompositeCluster
  writeConnectionSecretsToNamespace: crossplane-system
  patchSets:
    - name: metadata
      patches:
        - fromFieldPath: metadata.labels
  resources:
    - name: ekscluster
      base:
        apiVersion: eks.aws.upbound.io/v1beta1
        kind: Cluster
        spec:
          forProvider:
            region: eu-north-1
            version: "1.28"
            roleArnSelector:
              matchControllerRef: true
            vpcConfig:
              - endpointPrivateAccess: true
                endpointPublicAccess: true
                subnetIdSelector:
                  matchControllerRef: true
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
        - fromFieldPath: spec.parameters.version
          toFieldPath: spec.forProvider.version
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.roleArnSelector.matchLabels.role
          transforms:
            - type: string
              string:
                fmt: '%s-controlplane'
        - type: ToCompositeFieldPath
          fromFieldPath: metadata.name
          toFieldPath: status.clusterName
        - type: ToCompositeFieldPath
          fromFieldPath: status.conditions[0].reason
          toFieldPath: status.controlPlaneStatus
    - name: clusterAuth
      base:
        apiVersion: eks.aws.upbound.io/v1beta1
        kind: ClusterAuth
        spec:
          forProvider:
            region: eu-north-1
            clusterNameSelector:
              matchControllerRef: true
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
        - fromFieldPath: spec.id
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
            - type: string
              string:
                fmt: '%s-cluster'
        - fromFieldPath: spec.claimRef.namespace
          toFieldPath: spec.writeConnectionSecretToRef.namespace
      connectionDetails:
        - fromConnectionSecretKey: kubeconfig
    - name: eksnodegroup
      base:
        apiVersion: eks.aws.upbound.io/v1beta1
        kind: NodeGroup
        spec:
          forProvider:
            region: eu-north-1
            clusterNameSelector:
              matchControllerRef: true
            nodeRoleArnSelector:
              matchControllerRef: true
            subnetIdSelector:
              matchControllerRef: true
            scalingConfig:
              - minSize: 1
                maxSize: 5
                desiredSize: 1
            instanceTypes:
              - t3.small
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
        - fromFieldPath: spec.parameters.nodeSize
          toFieldPath: spec.forProvider.instanceTypes[0]
          transforms:
            - type: map
              map:
                small: t3.small
                medium: t3.medium
                large: t3.large
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.nodeRoleArnSelector.matchLabels.role
          transforms:
            - type: string
              string:
                fmt: '%s-nodegroup'
        - fromFieldPath: spec.parameters.minNodeCount
          toFieldPath: spec.forProvider.scalingConfig[0].minSize
        - fromFieldPath: spec.parameters.minNodeCount
          toFieldPath: spec.forProvider.scalingConfig[0].desiredSize
        - type: ToCompositeFieldPath
          fromFieldPath: status.conditions[0].reason
          toFieldPath: status.nodePoolStatus
    - name: iamrole-controlplane
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: Role
        spec:
          forProvider:
            assumeRolePolicy: |
              {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "eks.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }
                ]
              }
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: '%s-controlplane'
        - fromFieldPath: spec.id
          toFieldPath: metadata.labels.role
          transforms:
            - type: string
              string:
                fmt: '%s-controlplane'
    - name: iamrole-nodegroup
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: Role
        spec:
          forProvider:
            assumeRolePolicy: |
              {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "ec2.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }
                ]
              }
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: '%s-nodegroup'
        - fromFieldPath: spec.id
          toFieldPath: metadata.labels.role
          transforms:
            - type: string
              string:
                fmt: '%s-nodegroup'
    - name: iamattachment-controlplane
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
            roleSelector:
              matchControllerRef: true
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: '%s-controlplane'
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.roleSelector.matchLabels.role
          transforms:
            - type: string
              string:
                fmt: '%s-controlplane'
    - name: iamattachment-k8s-controlplane
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
           policyArn: arn:aws:iam::aws:policy/AmazonEKSServicePolicy
           roleSelector:
              matchControllerRef: true
      patches:
        - type: CombineFromComposite
          combine:
            strategy: string
            variables:
              - fromFieldPath: status.accountID
            string:
              fmt: 'arn:aws:iam::%s:policy/AccessKubernetesAPI'
          toFieldPath: spec.forProvider.policyArn
          policy:
            toFieldPath: Required
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: '%s-k8s-controlplane'
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.roleSelector.matchLabels.role
          transforms:
            - type: string
              string:
                fmt: '%s-controlplane'
    - name: iamattachment-service
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKSServicePolicy
            roleSelector:
              matchControllerRef: true
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: '%s-service'
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.roleSelector.matchLabels.role
          transforms:
            - type: string
              string:
                fmt: '%s-controlplane'
    - name: iamattachment-k8s-nodegroup
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
            roleSelector:
              matchControllerRef: true
      patches:
        - type: CombineFromComposite
          combine:
            strategy: string
            variables:
              - fromFieldPath: status.accountID
            string:
              fmt: 'arn:aws:iam::%s:policy/AccessKubernetesAPI'
          toFieldPath: spec.forProvider.policyArn
          policy:
            toFieldPath: Required
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: '%s-k8s-nodegroup'
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.roleSelector.matchLabels.role
          transforms:
            - type: string
              string:
                fmt: '%s-nodegroup'
    - name: iamattachment-worker
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
            roleSelector:
              matchControllerRef: true
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: '%s-worker'
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.roleSelector.matchLabels.role
          transforms:
            - type: string
              string:
                fmt: '%s-nodegroup'
    - name: iamattachment-cni
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
            roleSelector:
              matchControllerRef: true
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: '%s-cni'
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.roleSelector.matchLabels.role
          transforms:
            - type: string
              string:
                fmt: '%s-nodegroup'
    - name: iamattachment-registry
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
            roleSelector:
              matchControllerRef: true
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: '%s-registry'
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.roleSelector.matchLabels.role
          transforms:
            - type: string
              string:
                fmt: '%s-nodegroup'
    - name: vpc-nodepool
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: VPC
        spec:
          forProvider:
            region: eu-north-1
            cidrBlock: 10.10.0.0/16
            enableDnsSupport: true
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
    - name: sg-nodepool
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: SecurityGroup
        spec:
          forProvider:
            description: Cluster communication with worker nodes
            region: eu-north-1
            vpcIdSelector:
              matchControllerRef: true
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.groupName
      readinessChecks:
        - type: None
    - name: securityGroupRule
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: SecurityGroupRule
        spec:
          forProvider:
            description: I am too lazy to write descriptions
            region: eu-north-1
            type: egress
            fromPort: 0
            toPort: 0
            protocol: "-1"
            cidrBlocks:
              - 0.0.0.0/0
            securityGroupIdSelector:
              matchControllerRef: true
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
    - name: subnet-nodepool-1a
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: Subnet
        metadata:
          labels:
            zone: eu-north-1a
            access: public
        spec:
          forProvider:
            region: eu-north-1
            availabilityZone: eu-north-1a
            cidrBlock: 10.10.0.0/24
            vpcIdSelector:
              matchControllerRef: true
            mapPublicIpOnLaunch: true
            tags:
              "kubernetes.io/role/elb": "1"
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: '%s-1a'
    - name: subnet-nodepool-1b
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: Subnet
        metadata:
          labels:
            zone: eu-north-1b
            access: public
        spec:
          forProvider:
            region: eu-north-1
            availabilityZone: eu-north-1b
            cidrBlock: 10.10.1.0/24
            vpcIdSelector:
              matchControllerRef: true
            mapPublicIpOnLaunch: true
            tags:
              "kubernetes.io/role/elb": "1"
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: '%s-1b'
    - name: subnet-nodepool-1c
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: Subnet
        metadata:
          labels:
            zone: eu-north-1c
            access: public
        spec:
          forProvider:
            region: eu-north-1
            availabilityZone: eu-north-1c
            cidrBlock: 10.10.2.0/24
            vpcIdSelector:
              matchControllerRef: true
            mapPublicIpOnLaunch: true
            tags:
              "kubernetes.io/role/elb": "1"
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: '%s-1c'
    - name: gateway
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: InternetGateway
        spec:
          forProvider:
            region: eu-north-1
            vpcIdSelector:
              matchControllerRef: true
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
    - name: routeTable
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: RouteTable
        spec:
          forProvider:
            region: eu-north-1
            vpcIdSelector:
              matchControllerRef: true
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
    - name: route
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: Route
        spec:
          forProvider:
            region: eu-north-1
            routeTableIdSelector:
              matchControllerRef: true
            destinationCidrBlock: 0.0.0.0/0
            gatewayIdSelector:
              matchControllerRef: true
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
    - name: mainRouteTableAssociation
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: MainRouteTableAssociation
        spec:
          forProvider:
            region: eu-north-1
            routeTableIdSelector:
              matchControllerRef: true
            vpcIdSelector:
              matchControllerRef: true
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
    - name: routeTableAssociation1a
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: RouteTableAssociation
        spec:
          forProvider:
            region: eu-north-1
            routeTableIdSelector:
              matchControllerRef: true
            subnetIdSelector:
              matchControllerRef: true
              matchLabels:
                zone: eu-north-1a
                access: public
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: '%s-1a'
    - name: routeTableAssociation1b
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: RouteTableAssociation
        spec:
          forProvider:
            region: eu-north-1
            routeTableIdSelector:
              matchControllerRef: true
            subnetIdSelector:
              matchControllerRef: true
              matchLabels:
                zone: eu-north-1b
                access: public
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: '%s-1b'
    - name: routeTableAssociation1c
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: RouteTableAssociation
        spec:
          forProvider:
            region: eu-north-1
            routeTableIdSelector:
              matchControllerRef: true
            subnetIdSelector:
              matchControllerRef: true
              matchLabels:
                zone: eu-north-1c
                access: public
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: '%s-1c'
    - name: helm
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: ProviderConfig
        spec:
          credentials:
            source: Secret
            secretRef:
              key: kubeconfig
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
        - fromFieldPath: spec.claimRef.namespace
          toFieldPath: spec.credentials.secretRef.namespace
        - fromFieldPath: spec.id
          toFieldPath: spec.credentials.secretRef.name
          transforms:
            - type: string
              string:
                fmt: '%s-cluster'
      readinessChecks:
        - type: None
    - name: kubernetes
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: ProviderConfig
        spec:
          credentials:
            source: Secret
            secretRef:
              key: kubeconfig
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
        - fromFieldPath: spec.claimRef.namespace
          toFieldPath: spec.credentials.secretRef.namespace
        - fromFieldPath: spec.id
          toFieldPath: spec.credentials.secretRef.name
          transforms:
            - type: string
              string:
                fmt: '%s-cluster'
      readinessChecks:
        - type: None
    - name: ns-prod
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          deletionPolicy: Orphan
          forProvider:
            manifest:
              apiVersion: v1
              kind: Namespace
              metadata:
                labels:
                  istio-injection: enabled
                name: prod
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: '%s-ns-prod'
        - fromFieldPath: spec.id
          toFieldPath: spec.providerConfigRef.name
    - name: ns-dev
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          deletionPolicy: Orphan
          forProvider:
            manifest:
              apiVersion: v1
              kind: Namespace
              metadata:
                name: dev
                labels:
                  istio-injection: enabled
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: '%s-ns-dev'
        - fromFieldPath: spec.id
          toFieldPath: spec.providerConfigRef.name
    - name: keda
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release
        spec:
          rollbackLimit: 3
          forProvider:
            namespace: keda
            chart:
              name: keda
              repository: https://kedacore.github.io/charts
              version: 2.12.0
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: '%s-keda'
        - fromFieldPath: spec.id
          toFieldPath: spec.providerConfigRef.name
    - name: aws-auth-configmap
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          deletionPolicy: Orphan
          managementPolicy: ObserveCreateUpdate
          forProvider:
            manifest:
              apiVersion: v1
              kind: ConfigMap
              metadata:
                name: aws-auth
                namespace: kube-system
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: '%s-aws-auth'
        - fromFieldPath: spec.id
          toFieldPath: spec.providerConfigRef.name
        - type: CombineFromComposite
          combine:
            strategy: string
            variables:
              - fromFieldPath: status.nodeGroupArn
              - fromFieldPath: status.accountID
            string:
              fmt: |
                - groups:
                  - system:bootstrappers
                  - system:nodes
                  rolearn: %s
                  username: system:node:{{EC2PrivateDNSName}}
          toFieldPath: spec.forProvider.manifest.data.mapRoles
        - type: CombineFromComposite
          combine:
            strategy: string
            variables:
              - fromFieldPath: status.accountID
            string:
              fmt: |
                - groups:
                  - system:masters
                  rolearn: arn:aws:iam::%s:root
          toFieldPath: spec.forProvider.manifest.data.mapUsers
      readinessChecks:
        - type: None
    - name: k8s-cluster-sa
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          deletionPolicy: Orphan
          forProvider:
            manifest:
              apiVersion: v1
              kind: ServiceAccount
              metadata:
                name: k8s-sa
                namespace: kube-system
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: '%s-k8s-cluster-sa'
        - fromFieldPath: spec.id
          toFieldPath: spec.providerConfigRef.name
    - name: k8s-cluster-role
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          deletionPolicy: Orphan
          forProvider:
            manifest:
              apiVersion: rbac.authorization.k8s.io/v1
              kind: ClusterRole
              metadata:
                name: k8s-clusterrole
              rules:
                - apiGroups: [ "" ]
                  resources: [ "nodes", "namespaces", "pods", "configmaps", "endpoints", "events", "limitranges", "persistentvolumeclaims", "podtemplates", "replicacontrollers", "resourcequotas", "secrets", "serviceaccounts", "services" ]
                  verbs: [ "get", "list" ]
                - apiGroups: [ "apps" ]
                  resources: [ "deployments", "daemonsets", "statefulsets", "replicasets" ]
                  verbs: [ "get", "list" ]
                - apiGroups: [ "batch" ]
                  resources: [ "jobs", "cronjobs" ]
                  verbs: [ "get", "list" ]
                - apiGroups: [ "coordination.k8s.io" ]
                  resources: [ "leases" ]
                  verbs: [ "get", "list" ]
                - apiGroups: [ "discovery.k8s.io" ]
                  resources: [ "endpointslices" ]
                  verbs: [ "get", "list" ]
                - apiGroups: [ "events.k8s.io" ]
                  resources: [ "events" ]
                  verbs: [ "get", "list" ]
                - apiGroups: [ "extensions" ]
                  resources: [ "daemonsets", "deployments", "ingresses", "networkpolicies", "replicasets" ]
                  verbs: [ "get", "list" ]
                - apiGroups: [ "networking.k8s.io" ]
                  resources: [ "ingresses", "networkpolicies" ]
                  verbs: [ "get", "list" ]
                - apiGroups: [ "policy" ]
                  resources: [ "poddisruptionbudgets" ]
                  verbs: [ "get", "list" ]
                - apiGroups: [ "rbac.authorization.k8s.io" ]
                  resources: [ "rolebindings", "roles" ]
                  verbs: [ "get", "list" ]
                - apiGroups: [ "storage.k8s.io" ]
                  resources: [ "csistoragecapacities" ]
                  verbs: [ "get", "list" ]
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: '%s-k8s-clusterrole'
        - fromFieldPath: spec.id
          toFieldPath: spec.providerConfigRef.name
    - name: k8s-cluster-role-binding
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          deletionPolicy: Orphan
          forProvider:
            manifest:
              apiVersion: rbac.authorization.k8s.io/v1
              kind: ClusterRoleBinding
              metadata:
                name: k8s-clusterrolebinding
              roleRef:
                apiGroup: rbac.authorization.k8s.io
                kind: ClusterRole
                name: k8s-clusterrole
              subjects:
                - kind: ServiceAccount
                  name: k8s-sa
                  namespace: kube-system
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: '%s-k8s-clusterrolebinding'
        - fromFieldPath: spec.id
          toFieldPath: spec.providerConfigRef.name